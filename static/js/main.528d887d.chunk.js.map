{"version":3,"sources":["FinalFormControl.tsx","FormCheck.tsx","SpinButton.tsx","api.ts","Form.tsx","SelectAndCopyField.tsx","URLList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["input","meta","children","extraProps","error","submitError","showError","invalid","dirtySinceLastSubmit","touched","active","Form","Control","isInvalid","Feedback","type","remInput","Check","checked","value","loading","loadingMessage","message","spinnerProps","buttonProps","Button","Spinner","size","animation","role","aria-hidden","vredditID","url","res","exec","length","getVRedditFromUser","Promise","resolve","reject","test","fetch","then","r","text","Error","getVRedditFromComments","urls","catch","err","loadVideos","valid","vid","opts","rem","once","fail","e","remove","clearVideo","setTimeout","types","_e","newURLs","resolveOnFirst","Object","keys","map","t","removeEventListener","src","undefined","addEventListener","onSubmit","setURLs","id","quality","document","createElement","getURLs","FORM_ERROR","URLForm","handleSubmit","submitting","pristine","submitErrors","formError","disabledFromUserError","Alert","variant","Row","sm","md","Group","as","Col","lg","Label","component","FinalFormControl","name","placeholder","Text","className","FormCheck","label","SpinButton","disabled","validate","URL","_","render","initialValues","displayValue","passthrough","useState","isLoading","setLoading","inputRef","useRef","showInput","InputGroup","FormControl","onClick","current","select","ref","style","display","readOnly","Append","execCommand","target","focus","CopyButton","VideoPreview","width","height","video","SelectAndCopyField","href","Container","URLList","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.528d887d.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { FieldRenderProps } from 'react-final-form';\n\nexport default ({\n  input,\n  meta,\n  children,\n  ...extraProps\n}: FieldRenderProps<string>) => {\n  const error = meta.error || meta.submitError;\n  const showError = meta.invalid && !meta.dirtySinceLastSubmit && meta.touched && !meta.active;\n  return (\n    <>\n      <Form.Control\n        isInvalid={showError}\n        {...input}\n        {...extraProps}\n      >\n        { children }\n      </Form.Control>\n      {\n        showError && (\n          <Form.Control.Feedback type=\"invalid\">\n            { error }\n          </Form.Control.Feedback>\n        )\n      }\n    </>\n  );\n};\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { FieldRenderProps } from 'react-final-form';\n\nexport default ({\n  input,\n  meta,\n  ...extraProps\n}: FieldRenderProps<string>) => {\n  const error = meta.error || meta.submitError;\n  const showError = meta.invalid && !meta.dirtySinceLastSubmit && meta.touched && !meta.active;\n  const { type, ...remInput } = input;\n\n  return (\n    <>\n      <Form.Check\n        isInvalid={showError}\n        type=\"checkbox\"\n        {...remInput}\n        {...extraProps}\n        checked={!!remInput.value}\n      />\n      {\n        showError && (\n          <Form.Control.Feedback type=\"invalid\">\n            { error }\n          </Form.Control.Feedback>\n        )\n      }\n    </>\n  );\n};\n","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\n\ntype Props = {\n  loading: boolean;\n  loadingMessage: string;\n  message: string;\n  spinnerProps?: Partial<React.ComponentProps<typeof Spinner>>;\n} & React.ComponentProps<typeof Button>;\n\nexport default ({\n  loading,\n  loadingMessage,\n  message,\n  spinnerProps = {},\n  ...buttonProps\n}: Props) => (\n  <Button\n    {...buttonProps}\n  >\n    {\n      loading && (\n        <Spinner\n          size=\"sm\"\n          animation=\"border\"\n          role=\"status\"\n          aria-hidden=\"true\"\n          {...spinnerProps}\n        />\n      )\n    }\n    { loading ? loadingMessage : message }\n  </Button>\n);\n","export type APIError<Values> = {\n  error?: string;\n} & Partial<Values>;\n\n\nexport const vredditID = (url: string): string | undefined => {\n  const res = /v\\.redd\\.it\\/([A-Za-z0-9]+)/.exec(url);\n\n  if (res?.length !== 2) {\n    return undefined;\n  }\n\n  return res[1];\n}\n\nexport const getVRedditFromComments = (url: string): Promise<string> => (\n  new Promise((resolve, reject) => (\n    // Thank you cors anywhere for this awesome hack.\n    fetch(`//cors-anywhere.herokuapp.com/${url}`)\n      .then((r) => r.text())\n      .then((text) => {\n        const res = /(https:\\/\\/v\\.redd\\.it\\/[A-Z0-9a-z]+)/.exec(text);\n\n        if (!res || res?.length < 2) {\n          reject(new Error('Failed to find v.redd.it url in link; is it a video?'));\n        } else {\n          resolve(res[1]);\n        }\n      })\n  ))\n);\n\nexport const getURLsFromMPD = (xml: string): string[] => {\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(xml, 'text/xml');\n\n  return [].slice.call(\n    xmlDoc\n      .getElementsByTagName('BaseURL')\n  ).map(({ nodeValue }) => nodeValue);\n};\n\nconst getVRedditFromUser = (url: string): Promise<string> => (\n  new Promise((resolve, reject) => {\n    if (/v\\.redd\\.it\\/([A-Za-z0-9]+)/.test(url)) {\n      resolve(url);\n    } else if (/(m|old)?\\.?reddit\\.com\\/r\\/.*?\\/comments/.test(url)) {\n      // comments link\n      getVRedditFromComments(url)\n        .then((urls) => resolve(urls))\n        .catch((err) => reject(err));\n    } else {\n      reject(new Error('Couldn\\'t get a reddit link from that. Please email me@brod.es if this is a valid reddit link.'));\n    }\n  })\n);\n\nexport const getURLs = (url: string, opts: { resolveOnFirst: boolean } = { resolveOnFirst: false }): Promise<string[]> => (\n  new Promise((resolve, reject) => (\n    getVRedditFromUser(url)\n      .then((url) => {\n        let id = vredditID(url);\n\n        if (id === undefined) {\n          throw new Error('could not get id from vreddit url');\n        }\n\n        const qualities = [\n          '1080',\n          '720',\n          '480',\n          '360',\n          '96',\n        ];\n        const urls = qualities.map((quality) => `https://v.redd.it/${id}/DASH_${quality}.mp4`);\n\n        // dear lord, here we go\n        const vid = document.createElement('video');\n        loadVideos(urls, [], vid, resolve, opts);\n      })\n      .catch((err) => reject(err))\n  ))\n);\n\n// Recursively calls itself based on events from the past vid's loading. If it loads, we know\n// it's a good url, if it fails, we don't.\n//\n// If resolveOnFirst is true, we'll resolve on the first success with one URL. Otherwise,\n// we accumate URLs by walking all of urls before resolving.\nconst loadVideos = (urls: string[], valid: string[], vid: HTMLVideoElement, resolve: (_: string[]) => void, opts: { resolveOnFirst: boolean }) => {\n  const [url, ...rem] = urls;\n  const once = { once: '' };\n\n  const meta = (_e: Event) => {\n    remove();\n    clearVideo();\n\n    const newURLs = [...valid, url];\n\n    if (rem.length === 0 || opts.resolveOnFirst) {\n      return resolve(newURLs);\n    }\n\n    setTimeout(() => {\n      loadVideos(rem, newURLs, vid, resolve, opts);\n    }, 500);\n  };\n\n  const fail = (e: Event) => {\n    remove();\n    once.once = e.type;\n    clearVideo();\n\n    if (rem.length === 0) {\n      return resolve(valid);\n    }\n\n    setTimeout(() => {\n      // debounce since abort could fire with error.\n      if (once.once !== e.type) {\n        return;\n      }\n\n      loadVideos(rem, valid, vid, resolve, opts);\n    }, 500);\n  };\n\n  const types: { [s: string]: (e: Event) => void } = {\n    'abort': fail,\n    'error': fail,\n    'loadedmetadata': meta,\n  };\n\n  const remove = () => (\n    Object.keys(types).map((t) => (\n      vid.removeEventListener(t, types[t])\n    ))\n  );\n\n  const clearVideo = () => {\n    // TypesScript doesn't allow src to be empty, even though\n    // it's perfectly fine and stops the video from loading.\n    (vid as any).src = undefined;\n  };\n\n  Object.keys(types).map((t) => (\n    vid.addEventListener(t, types[t])\n  ));\n\n  vid.src = url;\n};\n","import React from 'react';\nimport { Form as FinalForm, Field, FormRenderProps } from 'react-final-form';\nimport { FORM_ERROR } from 'final-form';\n\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Alert from 'react-bootstrap/Alert';\n\nimport FinalFormControl from './FinalFormControl';\nimport FormCheck from './FormCheck';\nimport SpinButton from './SpinButton';\nimport {\n  getURLs,\n} from './api';\n\ntype Values = {\n  url: string;\n  resolveOnFirst: boolean;\n};\n\ntype ErrorValues = Partial<Values> & {\n  [FORM_ERROR]?: string;\n};\n\nconst onSubmit = (setURLs: (urls: string[]) => void) => ({ url, resolveOnFirst }: Values): Promise<ErrorValues> => (\n  new Promise((resolve) => {\n    getURLs(url, { resolveOnFirst })\n      .then((urls) => {\n        setURLs(urls);\n        resolve();\n      })\n      .catch((error) => {\n        resolve({\n          [FORM_ERROR]: error,\n        });\n      });\n  })\n);\n\nconst URLForm = ({\n  handleSubmit,\n  submitting,\n  pristine,\n  dirtySinceLastSubmit,\n  invalid,\n  error,\n  submitError,\n  submitErrors,\n}: FormRenderProps<Values>) => {\n  const formError = submitError || error;\n  const serverError = submitErrors !== undefined && submitErrors[FORM_ERROR] !== undefined;\n  // Allow server errors (submitError) to retry without changes.\n  const disabledFromUserError = !serverError && !dirtySinceLastSubmit;\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      { formError && <Alert variant=\"danger\">{`${formError}`}</Alert> }\n      <Row sm=\"12\" md=\"8\">\n        <Form.Group as={Col} md=\"12\" lg=\"8\">\n          <Form.Label>URL</Form.Label>\n          <Field\n            component={FinalFormControl}\n            name=\"url\"\n            type=\"text\"\n            placeholder=\"https://v.redd.it/asdf1234\"\n          />\n          <Form.Text className=\"text-muted\">\n            Provide a comments link for a v.redd.it video or a v.redd.it video link.\n          </Form.Text>\n        </Form.Group>\n        <Form.Group as={Col} md=\"12\" lg=\"8\">\n          <Field\n            component={FormCheck}\n            name=\"resolveOnFirst\"\n            label=\"Return only the highest quality video\"\n          />\n        </Form.Group>\n\n        <Col md=\"8\">\n          <SpinButton\n            variant=\"primary\"\n            type=\"submit\"\n            message=\"Convert\"\n            loading={submitting}\n            loadingMessage=\"Converting...\"\n            disabled={submitting || pristine || (invalid && disabledFromUserError)}\n          />\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nconst validate = ({ url, ...rem }: Values): ErrorValues => {\n  if (!url || url.length < 3) {\n    return {\n      url: 'A valid URL is required',\n    };\n  }\n\n  try {\n    new URL(url);\n  } catch (_) {\n    return {\n      url: 'This isn\\'t a valid URL. It should be in the format https://v.redd.it/asdf1234xyz',\n    };\n  }\n\n  return {};\n};\n\nexport default ({ setURLs }: { setURLs: (urls: string[]) => void }) => (\n  <FinalForm\n    onSubmit={onSubmit(setURLs)}\n    validate={validate}\n    render={URLForm}\n    initialValues={{ resolveOnFirst: true }}\n  />\n);\n","import React, { useRef, useState } from 'react';\n\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport {\n  GoClippy,\n  GoCheck,\n} from 'react-icons/go';\n\nexport default ({ value, displayValue, ...passthrough }: { value: string; displayValue?: boolean }) => {\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const showInput = displayValue === undefined || displayValue;\n\n  const onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!inputRef?.current) {\n      return;\n    }\n\n    setLoading(true);\n    // hack around the browser needing to see it.\n    if (!showInput) {\n      inputRef.current.style.display = 'block';\n    }\n    inputRef.current.select();\n    document.execCommand('copy');\n    if (!showInput) {\n      inputRef.current.style.display = 'none';\n    }\n\n    (e.target as any).focus();\n\n    setTimeout(() => setLoading(false), 1000);\n  };\n\n  return (\n    <>\n      <InputGroup className=\"copy-group\">\n        <FormControl\n          className=\"copy-only\"\n          onClick={() => inputRef.current?.select()}\n          value={value}\n          ref={inputRef}\n          style={showInput ? {} : {\n            display: 'none',\n          }}\n          readOnly\n          {...passthrough}\n        />\n        <InputGroup.Append>\n          <CopyButton isLoading={isLoading} onClick={onClick} />\n        </InputGroup.Append>\n      </InputGroup>\n    </>\n  );\n};\n\ntype clk = (v: React.MouseEvent<HTMLButtonElement>) => void;\n\nconst CopyButton = ({ isLoading, onClick }: { isLoading: boolean; onClick: clk }) => (\n  <Button\n    onClick={onClick}\n    variant=\"outline-success\"\n  >\n    {isLoading ? (<GoCheck />) : (<GoClippy />)}\n  </Button>\n);\n","import React from 'react';\n\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\n\nimport SelectAndCopyField from './SelectAndCopyField';\n\nconst VideoPreview = ({ url }: { url: string }) => (\n  <video\n    src={url}\n    width=\"240\"\n    height=\"auto\"\n  />\n);\n\nconst quality = (url: string): string => {\n  const res = /DASH_([0-9]+)\\.([a-z0-9]{1,5})/.exec(url);\n\n  if (res?.length === 3) {\n    return `${res[1]}p ${res[2]} video`;\n  } else if (res?.length === 2) {\n    return `${res[1]}p video`;\n  } else {\n    return 'unknown quality';\n  }\n};\n\nexport default ({ urls, video }: { urls: string[], video?: boolean }) => (\n  <>\n    { video && <VideoPreview url={urls[0]} /> }\n    <div className=\"mt-3\" />\n    {\n      urls.map((url: string) => (\n        <Col md=\"8\">\n          <Form.Group>\n            <SelectAndCopyField\n              value={url}\n              displayValue\n            />\n            <Form.Label>\n              {quality(url)}\n              &nbsp;\n              (<a href={url} target=\"_blank\">preview</a>)\n            </Form.Label>\n          </Form.Group>\n        </Col>\n      ))\n    }\n  </>\n);\n","import React, { useState } from 'react';\n\nimport Container from 'react-bootstrap/Container';\n\nimport './App.scss';\n\nimport Form from './Form';\nimport URLList from './URLList';\n\nexport default () => {\n  const [urls, setURLs] = useState<string[] | null>(null);\n\n  return (\n    <Container className=\"app\">\n      <h2 className=\"app-header pt-md-5 mb-3\">\n        v.redd.it converter\n      </h2>\n      <Form\n        setURLs={setURLs}\n      />\n      <div className=\"mt-5\">\n        {\n          urls !== null && (\n            <URLList urls={urls} video />\n          )\n        }\n      </div>\n    </Container>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}